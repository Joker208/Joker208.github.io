[{"title":"CarouFredSel插件实现图片轮播","date":"2017-02-15T08:17:48.000Z","path":"2017/02/15/CarouFredSel插件实现鼠标移入停止/","text":"公司做北大的一个网站 里面有一个轮播效果 使用了CarouFredSel插件来实现 借这个机会好好来研究一下这个插件 先附上Demo 1234567891011121314151617&lt;ul id=&quot;time_ul&quot;&gt; &lt;li class=&quot;time_li&quot; style=&quot;height:398px;width:400px;&quot;&gt; &lt;div class=&quot;zhanlan_a&quot;&gt; &lt;img class=&quot;zh_pic&quot; src=&quot;../upload/images/&lt;%=pic %&gt;&quot;&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;time_li&quot; style=&quot;height:398px;width:400px;&quot;&gt; &lt;div class=&quot;zhanlan_a&quot;&gt; &lt;img class=&quot;zh_pic&quot; src=&quot;../upload/images/&lt;%=pic %&gt;&quot;&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;time_li&quot; style=&quot;height:398px;width:400px;&quot;&gt; &lt;div class=&quot;zhanlan_a&quot;&gt; &lt;img class=&quot;zh_pic&quot; src=&quot;../upload/images/&lt;%=pic %&gt;&quot;&gt; &lt;/div&gt; &lt;/li&gt;&lt;/ul&gt; 1234567891011121314151617&lt;script type=&quot;text/javascript&quot;&gt;$(&apos;#time_ul&apos;).carouFredSel(&#123; auto:true, direction: &apos;up&apos;, items: &#123; visible: 1, height: 398 &#125;, scroll: &#123; items:1, duration: 2000, timeoutDuration: 2500, pauseOnHover: true &#125;, pagination: &apos;#paginations&apos; &#125;);&lt;/script&gt; CarouFredSel的一些重要参数说明circular true 循环模式，true为无限循环，false为单轮循环。 infinite true 是否启用循环，默认起用。当circular设置为false的时候，再把infinite设置为false，就可以关闭循环 direction “left” 滚动方向，可选值：”right”, “left”, “up” , “down” width null 内容的宽度，如果为null，宽度自动计算 height null 内容的高度，如果为null，高度自动计算 padding 0 内容区域的padding items 5 显示个数。默认显示5个 scroll 默认等于显示的个数 一次滚动个数 auto true 是否自动播放。设置成false，不自动播放 prev null 指定某一元素控制内容向前 next null 指定某一元素控制内容向后 (“▔□▔)/(“▔□▔)/(“▔□▔)/ 另外，还学了一招–去除轮播效果 $(&apos;#time_ul&apos;).trigger(&apos;destroy&apos;);","tags":[{"name":"前端","slug":"前端","permalink":"https://joker208.github.io/tags/前端/"},{"name":"CarouFredSel","slug":"CarouFredSel","permalink":"https://joker208.github.io/tags/CarouFredSel/"}]},{"title":"图片外加a标签导致图片无法显示完整","date":"2017-02-15T07:19:05.000Z","path":"2017/02/15/前端小技巧/","text":"在公司主要做网站后端开发 不可避免的会用到前端的东西 正巧公司制作里有位大腿 没事多抱抱（@￣︶￣@） 最近就遇到问题了 问题描述： 当给图片添加链接的时候，我会用一个a标签来包裹img标签 但是这样会导致图片无法完全显示 &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&quot;&gt;&lt;/a&gt; 解决方法： 123&lt;a style=&quot;display:block;width:100%;height:100%;&quot; href=&quot;#&quot;&gt;&lt;img src=&quot;&quot;&gt;&lt;/a&gt; 开发这一行注重经验，多积累，多整理，争取早日变成大腿","tags":[{"name":"前端","slug":"前端","permalink":"https://joker208.github.io/tags/前端/"},{"name":"css","slug":"css","permalink":"https://joker208.github.io/tags/css/"}]},{"title":"hexo常用命令","date":"2017-02-14T09:07:55.000Z","path":"2017/02/14/hexo常用命令/","text":"安装bashnpm install hexo -g #安装npm update hexo -g #升级hexo init #初始化 简写hexo n “我的博客” == hexo new “我的博客” #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 服务器hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 监视文件变动hexo generate #使用 Hexo 生成静态文件快速而且简单hexo generate –watch #监视文件变动 完成后部署两个命令的作用是相同的hexo generate –deployhexo deploy –generate hexo deploy -ghexo server -g 草稿hexo publish [layout] 模版hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHub hexo new [layout] hexo new photo “My Gallery”hexo new “Hello World” –lang tw 模版（Scaffold）hexo new photo “My Gallery” 设置文章摘要以上是文章摘要 以下是余下全文 写作hexo new page hexo new post 推送到服务器上hexo n #写文章hexo g #生成hexo d #部署 #可与hexo g合并为 hexo d -g 安装RSS插件npm install hexo-generator-feed –save 开启RSS功能编辑hexo/_config.yml，添加如下代码： rss: /atom.xml #rss地址 默认即可","tags":[{"name":"hexo","slug":"hexo","permalink":"https://joker208.github.io/tags/hexo/"}]},{"title":"js天气插件","date":"2017-02-14T08:50:35.000Z","path":"2017/02/14/js天气插件/","text":"曾子曰：“吾日三省吾身——为人谋而不忠乎？与朋友交而不信乎？传不习乎？” 自从博客创建起来以后就没有再更新过。想来也是十分惭愧，工作这么长时间积攒了不少值得记录的东西，心里也一直想着要坚持更新才行，看来还是是懒。选择来到大城市就是为了能一直鞭策自己不断进步，但是一稳定下来就不想努力了，以后还是要日省吾身，保持一颗拼搏的心。 进入正题，前段时间一个网站项目里要加入天气插件，由于是定制化的页面，网上现有的插件都没法直接用，于是找了一个ajax直接获取天气数据的方法。 前端代码 12&lt;div id=&quot;location&quot;&gt;&lt;/div&gt;&lt;div id=&quot;weather&quot;&gt;&lt;/div&gt; js代码 12345678910111213141516var cityUrl = &apos;http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&apos;;//获取ip所在地区$.getScript(cityUrl, function (script, textStatus, jqXHR) &#123;var citytq = remote_ip_info.city;// 获取城市var url = &quot;http://php.weather.sina.com.cn/iframe/index/w_cl.php?code=js&amp;city=&quot; + citytq + &quot;&amp;day=0&amp;dfc=3&quot;;//sina提供的天气接口$.ajax(&#123; url: url, dataType: &quot;script&quot;, scriptCharset: &quot;gbk&quot;, success: function (data) &#123; var _w = window.SWther.w[citytq][0]; var tq = _w.s1 + &quot; &quot; + _w.t1 + &quot;℃～&quot; + _w.t2 + &quot;℃ &quot;; $(&apos;#location&apos;).html(citytq + &apos;地区：&apos;); $(&apos;#weather&apos;).html(tq); &#125; &#125;); &#125;); 说明在上段代码中的url里，将变量citytq赋值为北京：var url = &quot;http://php.weather.sina.com.cn/iframe/index/w_cl.php?code=js&amp;city=北京&amp;day=0&amp;dfc=3&quot;;可获得如下数据：(function(){var w=[];w[&#39;北京&#39;]=[{s1:&#39;晴&#39;,s2:&#39;晴&#39;,f1:&#39;qing&#39;,f2:&#39;qing&#39;,t1:&#39;13&#39;,t2:&#39;2&#39;,p1:&#39;3-4&#39;,p2:&#39;≤3&#39;,d1:&#39;北风&#39;,d2:&#39;无持续风向&#39;}];var add={now:&#39;2016-10-28 20:21:07&#39;,time:&#39;1477657267&#39;,update:&#39;北京时间10月28日07:58更新&#39;,error:&#39;0&#39;,total:&#39;1&#39;};window.SWther={w:w,add:add};})();//0","tags":[{"name":"js","slug":"js","permalink":"https://joker208.github.io/tags/js/"},{"name":"天气插件","slug":"天气插件","permalink":"https://joker208.github.io/tags/天气插件/"}]},{"title":"HEXO+githubpage搭建博客","date":"2017-02-14T06:26:54.000Z","path":"2017/02/14/HEXO-githubpage搭建博客/","text":"一、前言一千个人眼中有一千个哈姆雷特虽然网上已经不乏相关的教程，我还是把我的搭建步骤和大家分享，我的电脑是windows系统，有问题的话可以留言，我们一起来讨论哈~ 二、准备工作搭建博客首先要了解一下几个基本概念（其实我也没有看完） Git GitHub Pages Hexo Markdown 然后需要下载几个安装包，有些安装包需要翻墙不好下载，直接用我的百度云分享 Node.js（node-v6.9.5-x64.msi） Git（Git-2.11.1-64-bit.exe） 最后，记得在Github上注册个帐号ok，准备工作就做好了 三、搭建博客第一步，把上面提到的两个安装包先给安装了 第二步，将你的Github帐号与你的电脑绑定 先检查你的电脑里有没有SSH keys在电脑的桌面上点鼠标右键，选择Git Bash Here，就会出来黑框框，键入下面代码1$ ls -al ~/.ssh 默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub如果没有SSH key，则生成新的SSH key1$ ssh-keygen -t rsa -C \"your_email@example.com\" 这里的邮箱是你申请Github帐号时的邮箱成功后会在C:\\Users\\用户名\\ .ssh路径下生成两个文件id_rsa 以及id_rsa.pub之后在github添加SSH Key,在任意界面右上角，点击你的头像，选择Settings-&gt; SSH keys-&gt;New SSH key将id_rsa.pub里面的内容全部复制到Key框里面 ok，绑定成功~ 第三步，搭建本地博客在本地新建一个文件夹，比如Blog，文件右键，选择Git Bash Here输入指令安装hexo1$ npm install -g hexo 稍等片刻。。。安装完成后，输入以下指令1$ hexo init 该命令会在目标文件夹内建立网站所需要的所有文件接下来是安装依赖包1$ npm install 部署形成文件1$ hexo generate 再接下来运行server 跑起hexo服务1$ hexo server 这样博客在本地已经搭建好了，我们可以打开浏览器，输入http://localhost:4000/便可看到默认的博客了 鼓掌（/≧▽≦/），等等，其实还有第四步 第四步，博客上线 登录Github，点击”New repository”，新建一个版本库输入仓库名：你的Github名称.github.io然后点击Create repository这里的Repository name一定要用的github的用户名，不然显示不出来，因为githubPage只能你的用户名接下来，点击右边的“Setting”菜单进入设置,点击”Launch automatic page generator”进入之后点击底部的”Continue to layouts”之后选择一个随意模版，点击”Publish page”,发布github默认生成的一个静态站点ok，线上的工作完成，接下来修改一下本地文件 打开本地博客根目录下的配置文件_config.yml编辑最后面的deploy属性，加入代码123type: gitrepository: git@github.com:username/username.github.io.gitbranch: master 这里列举配置文件_config.yml的部分关键配置，可自行修改123456789101112131415161718192021222324252627# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: #网站的标题subtitle: #副标题description: #描述author: #作者信息avatar: #头像，图片位置在相应主题目录下的imageslanguage: zh-Hans #中文简体email: timezone:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: #配置主题stylus: compress: true #自适应布局# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git #部署环境，基于hexo+githubpage,所以这里使用git。注意：不同版本的hexo，type有可能不同，3.x以后应使用git,具体参看官方文档 repository: git@github.com:username/username.github.io.git #git仓库地址，替换成你的username即可，其他保持不变，后面会提到如何创建git仓库 branch: master 安装hexo-deployer-git插件1npm install hexo-deployer-git --save 部署你本地的主题到github上123hexo cleanhexo generator #简写 hexo ghexo deploy #简写 hexo d 最后，就可以在线上查看搭建好的博客了https://username.github.io 这次，博客真的就搭建完成了，干杯!~( ゜▽゜)つロ 对了，附送我用的主题以及知乎上的主题收集 hexo-theme-yilia 有哪些好看的 Hexo 主题？-知乎 文章参考 http://crazymilk.github.io/ http://blog.csdn.net/wx_jin/article/details/51027783 补充：HEXO里面一定要注意空格，配置文件_config.yml中的属性一定要在冒号后面空一格，不然会报错。","tags":[{"name":"hexo","slug":"hexo","permalink":"https://joker208.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://joker208.github.io/tags/github/"}]},{"title":"Hello World","date":"2017-02-13T09:18:10.337Z","path":"2017/02/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]